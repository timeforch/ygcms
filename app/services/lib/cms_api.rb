#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'cms_api_types'

module ICMSApi
  class Client
    include ::Thrift::Client

    def getUserCount()
      send_getUserCount()
      return recv_getUserCount()
    end

    def send_getUserCount()
      send_message('getUserCount', GetUserCount_args)
    end

    def recv_getUserCount()
      result = receive_message(GetUserCount_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserCount failed: unknown result')
    end

    def getAllUsers()
      send_getAllUsers()
      return recv_getAllUsers()
    end

    def send_getAllUsers()
      send_message('getAllUsers', GetAllUsers_args)
    end

    def recv_getAllUsers()
      result = receive_message(GetAllUsers_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllUsers failed: unknown result')
    end

    def getUserByLoginName(loginName)
      send_getUserByLoginName(loginName)
      return recv_getUserByLoginName()
    end

    def send_getUserByLoginName(loginName)
      send_message('getUserByLoginName', GetUserByLoginName_args, :loginName => loginName)
    end

    def recv_getUserByLoginName()
      result = receive_message(GetUserByLoginName_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getUserByLoginName failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getUserCount(seqid, iprot, oprot)
      args = read_args(iprot, GetUserCount_args)
      result = GetUserCount_result.new()
      result.success = @handler.getUserCount()
      write_result(result, oprot, 'getUserCount', seqid)
    end

    def process_getAllUsers(seqid, iprot, oprot)
      args = read_args(iprot, GetAllUsers_args)
      result = GetAllUsers_result.new()
      result.success = @handler.getAllUsers()
      write_result(result, oprot, 'getAllUsers', seqid)
    end

    def process_getUserByLoginName(seqid, iprot, oprot)
      args = read_args(iprot, GetUserByLoginName_args)
      result = GetUserByLoginName_result.new()
      result.success = @handler.getUserByLoginName(args.loginName)
      write_result(result, oprot, 'getUserByLoginName', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetUserCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUsers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllUsers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::User}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserByLoginName_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOGINNAME = 1

    FIELDS = {
      LOGINNAME => {:type => ::Thrift::Types::STRING, :name => 'loginName'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetUserByLoginName_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::User}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

